/* Generated By:JavaCC: Do not edit this line. TDLParserTokenManager.java */
import java.io.IOException;
import java.io.File;

/** Token Manager. */
public class TDLParserTokenManager implements TDLParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000L);
      case 37:
         jjmatchedKind = 166;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 38:
         jjmatchedKind = 182;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x880000L);
      case 40:
         jjmatchedKind = 174;
         return jjMoveNfa_0(12, 0);
      case 41:
         jjmatchedKind = 175;
         return jjMoveNfa_0(12, 0);
      case 42:
         jjmatchedKind = 183;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 43:
         jjmatchedKind = 163;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000008000L);
      case 44:
         jjmatchedKind = 181;
         return jjMoveNfa_0(12, 0);
      case 45:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xb0000010000L);
      case 46:
         jjmatchedKind = 187;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x208000000000L);
      case 47:
         jjmatchedKind = 165;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L);
      case 58:
         jjmatchedKind = 185;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L);
      case 59:
         jjmatchedKind = 180;
         return jjMoveNfa_0(12, 0);
      case 60:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x280040000L);
      case 61:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000L);
      case 62:
         jjmatchedKind = 158;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x500020000L);
      case 63:
         jjmatchedKind = 186;
         return jjMoveNfa_0(12, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2a008200000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x420010L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400840000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x13100040L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x800020001000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x600L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800280L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000020L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000004000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2802040c0800L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x180010400L, 0x4L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1044000000006L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x8L);
      case 91:
         jjmatchedKind = 176;
         return jjMoveNfa_0(12, 0);
      case 93:
         jjmatchedKind = 177;
         return jjMoveNfa_0(12, 0);
      case 94:
         jjmatchedKind = 153;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000200000L, 0x2a008200000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100080500a000L, 0x420010L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200040440L, 0x400840000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2100008000000100L, 0x13100040L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4202000100080000L, 0x800020001000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x8L, 0x600L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800280L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10800080L, 0xa000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000020000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000020L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000020000L, 0x2000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x100000004000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xe0000000000L, 0x2802040c0800L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x404000L, 0x100L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x84c4002048010200L, 0x180010400L, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000a00000100000L, 0x1044000000006L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4080000000L, 0x1000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800000402000000L, 0x1L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x400000000L, 0x8L);
      case 123:
         jjmatchedKind = 178;
         return jjMoveNfa_0(12, 0);
      case 124:
         jjmatchedKind = 152;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x600000L);
      case 125:
         jjmatchedKind = 179;
         return jjMoveNfa_0(12, 0);
      case 126:
         jjmatchedKind = 184;
         return jjMoveNfa_0(12, 0);
      default :
         return jjMoveNfa_0(12, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 1;
         }
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000000L);
      case 58:
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 1;
         }
         break;
      case 60:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 61:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000020000L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2010600841284L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20008200000L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2841c0010100L, active2, 0x600L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000020002L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400820000001L, active2, 0x8L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L);
      case 78:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000108000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x800000400838L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000080000L, active2, 0L);
      case 84:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4400L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x13000040L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001000008000L, active1, 0x2010600841284L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20008200000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000464400L, active1, 0x2841c0010100L, active2, 0x600L);
      case 102:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100080000c000800L, active1, 0x1000000020002L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8c2000040010000L, active1, 0x400820000001L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000900000100L, active1, 0x4000000L, active2, 0L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc090800000L, active1, 0x1000108000L, active2, 0L);
      case 111:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4208400623002000L, active1, 0x800000400838L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000081000L, active1, 0x40000080000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10010000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8400002000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000200000L, active1, 0x4400L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2100000000000000L, active1, 0x13000040L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 1);
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 2;
         }
         break;
      case 46:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         break;
      case 61:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x4100008L, active2, 0x4L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x440L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2080000L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40400021002L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40010000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000400010L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8002a0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x11000000L, active2, 0L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 82:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1a84320040001L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400800000904L, active2, 0L);
      case 84:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x23000200000L, active2, 0x608L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000804000000L, active1, 0x4100008L, active2, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x440L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10100000001000L, active1, 0x2080000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000040400000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000024400080a00L, active1, 0x40400021002L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2840000L, active1, 0x40010000L, active2, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x201000000000L, active1, 0x2000000400010L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000021002000L, active1, 0x8002a0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040108000000L, active1, 0x8000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0x11000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800802000000000L, active1, 0x1a84320040001L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80008100L, active1, 0x400800000904L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2105400000204000L, active1, 0x23000200000L, active2, 0x608L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8200000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xa51000000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000400L, active2, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800280L, active2, 0L);
      case 69:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x1002000040040L, active2, 0L);
      case 70:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         break;
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 72:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 3;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xb1108200020L, active2, 0L);
      case 75:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         break;
      case 76:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x804000000010L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L, active2, 0x600L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 83:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200020000000L, active2, 0L);
      case 84:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x400000000801L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80008100L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000102001400L, active1, 0xa51000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0x100000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x2000400L, active2, 0L);
      case 100:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800280L, active2, 0L);
      case 101:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x21000010001d0000L, active1, 0x1002000040040L, active2, 0L);
      case 102:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         break;
      case 103:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x40000000000L, active2, 0L);
      case 104:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80c00000L, active1, 0xb1108200020L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 107:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         break;
      case 108:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80080000000800L, active1, 0x20000L, active2, 0L);
      case 109:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x804000000010L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000040000000L, active1, 0x4000000L, active2, 0x600L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x804000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x400000L, active2, 0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100008000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000801000000L, active1, 0x200020000000L, active2, 0L);
      case 116:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8c10040000002200L, active1, 0x400000000801L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004000L, active1, 0x80008100L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x80000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 3);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800100000010L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 68:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x88000400L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x204000080000L, active2, 0L);
      case 76:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200d00280L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000100L, active2, 0L);
      case 78:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x15040000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x840L, active2, 0L);
      case 82:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x400000000000L, active2, 0L);
      case 84:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000001L, active2, 0x600L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000200000L, active2, 0L);
      case 89:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000000000L, active1, 0x1800100000010L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000200L, active1, 0L, active2, 0L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40040040000000L, active1, 0x88000400L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000080000000L, active1, 0x40000000000L, active2, 0L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8400080000002000L, active1, 0x204000080000L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000000000L, active1, 0L, active2, 0L);
      case 107:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         break;
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2200200000000L, active1, 0x200d00280L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x10000000100L, active2, 0L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x880000L, active1, 0x15040000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000010000L, active1, 0x80000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x840L, active2, 0L);
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2100000000004000L, active1, 0x400000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2040000L, active1, 0x20L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000400L, active1, 0x2000001L, active2, 0x600L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000200000L, active2, 0L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 4);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000001L, active2, 0L);
      case 67:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         break;
      case 68:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 69:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000500280L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400004800000L, active2, 0L);
      case 76:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xa00000000L, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x600L);
      case 78:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4080000010L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80820L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200001000400L, active2, 0L);
      case 84:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000040L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800200000000000L, active1, 0x20000000001L, active2, 0L);
      case 99:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x40000500280L, active2, 0L);
      case 102:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      case 104:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0x400004800000L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000400L, active1, 0xa00000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000000L, active1, 0L, active2, 0x600L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000080002000L, active1, 0x4080000010L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80820L, active2, 0L);
      case 112:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200001000400L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40120000400000L, active1, 0x2000040L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 5);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0x600L);
      case 68:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000208000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3000040L, active2, 0L);
      case 76:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         break;
      case 77:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4800800L, active2, 0L);
      case 82:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
         }
         break;
      case 83:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x220080400000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x4000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0x600L);
      case 100:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80400000L, active1, 0x1000208000000L, active2, 0L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x3000040L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 109:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4800800L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
         }
         break;
      case 114:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
         }
         break;
      case 115:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x240000000000L, active1, 0x220080400000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0x80000L, active2, 0L);
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 6);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 6);
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000400000L, active2, 0x600L);
      case 71:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 76:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x3000040L, active2, 0L);
      case 83:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x200000400000L, active2, 0x600L);
      case 103:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0x8000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x3000040L, active2, 0L);
      case 112:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         break;
      case 114:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
         }
         break;
      case 115:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 7);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 68:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 78:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x600L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x600L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 8);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 8);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 76:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x600L);
      case 84:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 9;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x600L);
      case 112:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 9);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 9);
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 10;
         }
         break;
      case 70:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x600L);
      case 84:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 10;
         }
         break;
      case 100:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 10;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x600L);
      case 116:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 10);
}
static private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active2, 0x400L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active2, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active2, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active2, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 11);
}
static private int jjMoveStringLiteralDfa12_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 11);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active2, 0x400L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active2, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active2, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active2, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 12);
}
static private int jjMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 12);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa14_0(active2, 0x200L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active2, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active2, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active2, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 13);
}
static private int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 13);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa15_0(active2, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active2, 0x400L);
      case 103:
         return jjMoveStringLiteralDfa15_0(active2, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active2, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 14);
}
static private int jjMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 14);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa16_0(active2, 0x200L);
      case 86:
         return jjMoveStringLiteralDfa16_0(active2, 0x400L);
      case 103:
         return jjMoveStringLiteralDfa16_0(active2, 0x200L);
      case 118:
         return jjMoveStringLiteralDfa16_0(active2, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 15);
}
static private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 15);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active2, 0x400L);
      case 69:
         return jjMoveStringLiteralDfa17_0(active2, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active2, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active2, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 16);
}
static private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 16);
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa18_0(active2, 0x200L);
      case 84:
         return jjMoveStringLiteralDfa18_0(active2, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active2, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active2, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(12, 17);
}
static private int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 17);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa19_0(active2, 0x400L);
      case 83:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 18;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa19_0(active2, 0x400L);
      case 115:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 18;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 18);
}
static private int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjMoveNfa_0(12, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(12, 18);
   }
   switch(curChar)
   {
      case 83:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 19;
         }
         break;
      case 115:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(12, 19);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 601;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 196)
                        kind = 196;
                     jjCheckNAddStates(0, 8);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 35)
                     jjCheckNAddStates(12, 26);
                  else if (curChar == 47)
                     jjAddStates(27, 28);
                  else if (curChar == 34)
                     jjCheckNAddStates(29, 31);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(32, 33);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAddStates(32, 34);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAddStates(35, 39);
                  }
                  break;
               case 0:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 25:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAddStates(32, 34);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAddStates(32, 34);
                  break;
               case 31:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0xffffff7ffffffbffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 34:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 35:
                  if (curChar == 39 && kind > 193)
                     kind = 193;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(51, 54);
                  break;
               case 41:
                  if (curChar == 34)
                     jjCheckNAddStates(29, 31);
                  break;
               case 42:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 44:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 45:
               case 51:
                  if (curChar != 34)
                     break;
                  if (kind > 194)
                     kind = 194;
                  jjCheckNAddStates(55, 58);
                  break;
               case 46:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 47:
                  if (curChar == 34)
                     jjCheckNAddStates(59, 61);
                  break;
               case 48:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 50:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 52:
                  if (curChar == 47)
                     jjAddStates(62, 63);
                  break;
               case 53:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 54:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 42)
                     jjCheckNAddStates(64, 67);
                  break;
               case 56:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 58:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 47)
                     jjCheckNAddStates(55, 58);
                  break;
               case 60:
                  if (curChar == 35)
                     jjCheckNAddStates(68, 78);
                  break;
               case 61:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(79, 86);
                  break;
               case 63:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(87, 89);
                  break;
               case 64:
                  if (curChar == 10)
                     jjCheckNAddStates(87, 89);
                  break;
               case 66:
                  if (curChar == 10)
                     jjCheckNAddStates(55, 58);
                  break;
               case 106:
                  if (curChar == 47)
                     jjAddStates(90, 91);
                  break;
               case 107:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 108:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 109:
                  if (curChar == 42)
                     jjCheckNAddStates(92, 95);
                  break;
               case 110:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 111:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 112:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(112, 113);
                  break;
               case 113:
                  if (curChar == 47)
                     jjCheckNAddStates(79, 86);
                  break;
               case 114:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 115:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 116:
                  if (curChar == 10)
                     jjCheckNAddStates(79, 86);
                  break;
               case 117:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(96, 98);
                  break;
               case 119:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 120:
                  if (curChar == 48)
                     jjCheckNAddStates(102, 104);
                  break;
               case 121:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(102, 104);
                  break;
               case 122:
                  if (curChar == 10)
                     jjCheckNAddStates(105, 107);
                  break;
               case 123:
               case 125:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddStates(105, 107);
                  break;
               case 124:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 127:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 128:
                  if (curChar == 47)
                     jjAddStates(111, 112);
                  break;
               case 129:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 130:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 131:
                  if (curChar == 42)
                     jjCheckNAddStates(113, 116);
                  break;
               case 132:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(132, 133);
                  break;
               case 133:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 134:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(134, 135);
                  break;
               case 135:
                  if (curChar == 47)
                     jjCheckNAddStates(108, 110);
                  break;
               case 136:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(137, 138);
                  break;
               case 137:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(137, 138);
                  break;
               case 138:
                  if (curChar == 10)
                     jjCheckNAddStates(108, 110);
                  break;
               case 143:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 47)
                     jjAddStates(117, 118);
                  break;
               case 145:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 146:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 147:
                  if (curChar == 42)
                     jjCheckNAddStates(119, 122);
                  break;
               case 148:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(148, 149);
                  break;
               case 149:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 150:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(150, 151);
                  break;
               case 151:
                  if (curChar == 47)
                     jjCheckNAddStates(102, 104);
                  break;
               case 152:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(153, 154);
                  break;
               case 153:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(153, 154);
                  break;
               case 154:
                  if (curChar == 10)
                     jjCheckNAddStates(102, 104);
                  break;
               case 155:
                  if (curChar == 47)
                     jjAddStates(123, 124);
                  break;
               case 156:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(157, 158);
                  break;
               case 157:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(157, 158);
                  break;
               case 158:
                  if (curChar == 42)
                     jjCheckNAddStates(125, 128);
                  break;
               case 159:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(159, 160);
                  break;
               case 160:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(157, 158);
                  break;
               case 161:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(161, 162);
                  break;
               case 162:
                  if (curChar == 47)
                     jjCheckNAddStates(99, 101);
                  break;
               case 163:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(164, 165);
                  break;
               case 164:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(164, 165);
                  break;
               case 165:
                  if (curChar == 10)
                     jjCheckNAddStates(99, 101);
                  break;
               case 167:
                  if (curChar == 47)
                     jjAddStates(129, 130);
                  break;
               case 168:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(169, 170);
                  break;
               case 169:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(169, 170);
                  break;
               case 170:
                  if (curChar == 42)
                     jjCheckNAddStates(131, 134);
                  break;
               case 171:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(171, 172);
                  break;
               case 172:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(169, 170);
                  break;
               case 173:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(173, 174);
                  break;
               case 174:
                  if (curChar == 47)
                     jjCheckNAddStates(96, 98);
                  break;
               case 175:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(176, 177);
                  break;
               case 176:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(176, 177);
                  break;
               case 177:
                  if (curChar == 10)
                     jjCheckNAddStates(96, 98);
                  break;
               case 178:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(179, 66);
                  break;
               case 179:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(179, 66);
                  break;
               case 180:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(135, 138);
                  break;
               case 181:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(139, 142);
                  break;
               case 182:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(143, 146);
                  break;
               case 185:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(147, 150);
                  break;
               case 186:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(151, 154);
                  break;
               case 187:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(155, 158);
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 192:
                  if (curChar != 48)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAddStates(35, 39);
                  break;
               case 193:
                  if (curChar != 48)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAddStates(159, 162);
                  break;
               case 194:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAddStates(163, 165);
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAddStates(166, 168);
                  break;
               case 197:
                  if (curChar == 47)
                     jjAddStates(27, 28);
                  break;
               case 198:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 199:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 200:
                  if (curChar == 42)
                     jjCheckNAddStates(169, 172);
                  break;
               case 201:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(201, 202);
                  break;
               case 202:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 203:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(203, 204);
                  break;
               case 204:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 205:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(206, 207);
                  break;
               case 206:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(206, 207);
                  break;
               case 207:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 208:
                  if (curChar == 35)
                     jjCheckNAddStates(12, 26);
                  break;
               case 209:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(173, 180);
                  break;
               case 211:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(181, 183);
                  break;
               case 212:
                  if (curChar == 10)
                     jjCheckNAddStates(181, 183);
                  break;
               case 214:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 254:
                  if (curChar == 47)
                     jjAddStates(184, 185);
                  break;
               case 255:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(256, 257);
                  break;
               case 256:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(256, 257);
                  break;
               case 257:
                  if (curChar == 42)
                     jjCheckNAddStates(186, 189);
                  break;
               case 258:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(258, 259);
                  break;
               case 259:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(256, 257);
                  break;
               case 260:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(260, 261);
                  break;
               case 261:
                  if (curChar == 47)
                     jjCheckNAddStates(173, 180);
                  break;
               case 262:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(263, 264);
                  break;
               case 263:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(263, 264);
                  break;
               case 264:
                  if (curChar == 10)
                     jjCheckNAddStates(173, 180);
                  break;
               case 265:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(190, 192);
                  break;
               case 267:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(193, 195);
                  break;
               case 268:
                  if (curChar == 48)
                     jjCheckNAddStates(196, 198);
                  break;
               case 269:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(196, 198);
                  break;
               case 270:
                  if (curChar == 10)
                     jjCheckNAddStates(199, 201);
                  break;
               case 271:
               case 273:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     jjCheckNAddStates(199, 201);
                  break;
               case 272:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(272, 273);
                  break;
               case 275:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(202, 204);
                  break;
               case 276:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 277:
                  if (curChar == 47)
                     jjAddStates(205, 206);
                  break;
               case 278:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(279, 280);
                  break;
               case 279:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(279, 280);
                  break;
               case 280:
                  if (curChar == 42)
                     jjCheckNAddStates(207, 210);
                  break;
               case 281:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(281, 282);
                  break;
               case 282:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(279, 280);
                  break;
               case 283:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(283, 284);
                  break;
               case 284:
                  if (curChar == 47)
                     jjCheckNAddStates(202, 204);
                  break;
               case 285:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(286, 287);
                  break;
               case 286:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(286, 287);
                  break;
               case 287:
                  if (curChar == 10)
                     jjCheckNAddStates(202, 204);
                  break;
               case 292:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if (curChar == 47)
                     jjAddStates(211, 212);
                  break;
               case 294:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(295, 296);
                  break;
               case 295:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(295, 296);
                  break;
               case 296:
                  if (curChar == 42)
                     jjCheckNAddStates(213, 216);
                  break;
               case 297:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(297, 298);
                  break;
               case 298:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(295, 296);
                  break;
               case 299:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(299, 300);
                  break;
               case 300:
                  if (curChar == 47)
                     jjCheckNAddStates(196, 198);
                  break;
               case 301:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(302, 303);
                  break;
               case 302:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(302, 303);
                  break;
               case 303:
                  if (curChar == 10)
                     jjCheckNAddStates(196, 198);
                  break;
               case 304:
                  if (curChar == 47)
                     jjAddStates(217, 218);
                  break;
               case 305:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(306, 307);
                  break;
               case 306:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(306, 307);
                  break;
               case 307:
                  if (curChar == 42)
                     jjCheckNAddStates(219, 222);
                  break;
               case 308:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(308, 309);
                  break;
               case 309:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(306, 307);
                  break;
               case 310:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(310, 311);
                  break;
               case 311:
                  if (curChar == 47)
                     jjCheckNAddStates(193, 195);
                  break;
               case 312:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(313, 314);
                  break;
               case 313:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(313, 314);
                  break;
               case 314:
                  if (curChar == 10)
                     jjCheckNAddStates(193, 195);
                  break;
               case 316:
                  if (curChar == 47)
                     jjAddStates(223, 224);
                  break;
               case 317:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(318, 319);
                  break;
               case 318:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(318, 319);
                  break;
               case 319:
                  if (curChar == 42)
                     jjCheckNAddStates(225, 228);
                  break;
               case 320:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(320, 321);
                  break;
               case 321:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(318, 319);
                  break;
               case 322:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(322, 323);
                  break;
               case 323:
                  if (curChar == 47)
                     jjCheckNAddStates(190, 192);
                  break;
               case 324:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(325, 326);
                  break;
               case 325:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(325, 326);
                  break;
               case 326:
                  if (curChar == 10)
                     jjCheckNAddStates(190, 192);
                  break;
               case 327:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(327, 336);
                  break;
               case 329:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(229, 230);
                  break;
               case 330:
                  if (curChar == 60)
                     jjCheckNAdd(331);
                  break;
               case 331:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(331, 332);
                  break;
               case 332:
                  if (curChar == 62 && kind > 132)
                     kind = 132;
                  break;
               case 337:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(337, 346);
                  break;
               case 339:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(231, 232);
                  break;
               case 340:
                  if (curChar == 34)
                     jjCheckNAdd(341);
                  break;
               case 341:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(341, 342);
                  break;
               case 342:
                  if (curChar == 34 && kind > 133)
                     kind = 133;
                  break;
               case 578:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  jjCheckNAddStates(0, 8);
                  break;
               case 579:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  jjCheckNAdd(579);
                  break;
               case 580:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(580, 581);
                  break;
               case 581:
                  if (curChar != 46)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjCheckNAdd(582);
                  break;
               case 582:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjCheckNAdd(582);
                  break;
               case 583:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(583, 584);
                  break;
               case 584:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(585, 586);
                  break;
               case 585:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(585, 586);
                  break;
               case 587:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(588);
                  break;
               case 588:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAddTwoStates(588, 589);
                  break;
               case 590:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(590, 591);
                  break;
               case 591:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(592, 589);
                  break;
               case 592:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(592, 589);
                  break;
               case 593:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(593, 594);
                  break;
               case 595:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(596);
                  break;
               case 596:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAddTwoStates(596, 589);
                  break;
               case 597:
                  if (curChar == 46)
                     jjCheckNAddStates(9, 11);
                  break;
               case 598:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjCheckNAdd(598);
                  break;
               case 599:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(599, 586);
                  break;
               case 600:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(600, 589);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 195)
                        kind = 195;
                     jjCheckNAdd(191);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(233, 234);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(235, 236);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(237, 241);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(242, 246);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(247, 249);
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 76)
                     jjAddStates(250, 251);
                  break;
               case 1:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddTwoStates(2, 7);
                  break;
               case 2:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(2, 7);
                  break;
               case 3:
                  if ((0x10000000100000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 4:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 9:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 23);
                  break;
               case 14:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(14, 23);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 16:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 27:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x100000001000L & l) != 0L && kind > 191)
                     kind = 191;
                  break;
               case 29:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x20000000200000L & l) != 0L && kind > 191)
                     kind = 191;
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(252, 254);
                  break;
               case 34:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 39:
                  if (curChar == 120)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(51, 54);
                  break;
               case 42:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 43:
                  if (curChar == 92)
                     jjAddStates(255, 257);
                  break;
               case 44:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 49:
                  if (curChar == 92)
                     jjAddStates(258, 260);
                  break;
               case 50:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 54:
               case 57:
                  jjCheckNAddTwoStates(54, 55);
                  break;
               case 62:
                  if (curChar == 101)
                     jjCheckNAddStates(87, 89);
                  break;
               case 63:
                  jjCheckNAddStates(87, 89);
                  break;
               case 65:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
               case 77:
                  if (curChar == 110)
                     jjCheckNAdd(62);
                  break;
               case 68:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 102)
                     jjCheckNAddStates(87, 89);
                  break;
               case 73:
               case 87:
               case 90:
                  if (curChar == 101)
                     jjCheckNAdd(72);
                  break;
               case 74:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 78:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 97)
                     jjCheckNAddStates(87, 89);
                  break;
               case 81:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 105)
                     jjCheckNAddStates(261, 263);
                  break;
               case 88:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 91:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 101)
                     jjAddStates(264, 267);
                  break;
               case 95:
               case 99:
                  if (curChar == 105)
                     jjCheckNAdd(72);
                  break;
               case 96:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 115)
                     jjCheckNAdd(62);
                  break;
               case 98:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 100:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 114)
                     jjCheckNAddStates(87, 89);
                  break;
               case 103:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 108:
               case 111:
                  jjCheckNAddTwoStates(108, 109);
                  break;
               case 115:
                  jjAddStates(268, 269);
                  break;
               case 118:
                  if (curChar == 102)
                     jjAddStates(99, 101);
                  break;
               case 123:
                  jjCheckNAddStates(105, 107);
                  break;
               case 125:
                  if ((0xfffffddfffffffffL & l) != 0L)
                     jjCheckNAddStates(105, 107);
                  break;
               case 126:
                  if (curChar == 102)
                     jjCheckNAddStates(108, 110);
                  break;
               case 130:
               case 133:
                  jjCheckNAddTwoStates(130, 131);
                  break;
               case 137:
                  jjAddStates(270, 271);
                  break;
               case 139:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 140:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 146:
               case 149:
                  jjCheckNAddTwoStates(146, 147);
                  break;
               case 153:
                  jjAddStates(272, 273);
                  break;
               case 157:
               case 160:
                  jjCheckNAddTwoStates(157, 158);
                  break;
               case 164:
                  jjAddStates(274, 275);
                  break;
               case 166:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 169:
               case 172:
                  jjCheckNAddTwoStates(169, 170);
                  break;
               case 176:
                  jjAddStates(276, 277);
                  break;
               case 179:
                  jjCheckNAddTwoStates(179, 66);
                  break;
               case 183:
                  if (curChar == 120)
                     jjCheckNAdd(184);
                  break;
               case 184:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(143, 146);
                  break;
               case 188:
                  if (curChar == 120)
                     jjCheckNAdd(189);
                  break;
               case 189:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(155, 158);
                  break;
               case 190:
               case 191:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  jjCheckNAdd(191);
                  break;
               case 195:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(196);
                  break;
               case 196:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAddStates(166, 168);
                  break;
               case 199:
               case 202:
                  jjCheckNAddTwoStates(199, 200);
                  break;
               case 206:
                  jjAddStates(278, 279);
                  break;
               case 210:
                  if (curChar == 101)
                     jjCheckNAddStates(181, 183);
                  break;
               case 211:
                  jjCheckNAddStates(181, 183);
                  break;
               case 213:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 215:
               case 225:
                  if (curChar == 110)
                     jjCheckNAdd(210);
                  break;
               case 216:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 102)
                     jjCheckNAddStates(181, 183);
                  break;
               case 221:
               case 235:
               case 238:
                  if (curChar == 101)
                     jjCheckNAdd(220);
                  break;
               case 222:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 226:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 97)
                     jjCheckNAddStates(181, 183);
                  break;
               case 229:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if (curChar == 105)
                     jjCheckNAddStates(280, 282);
                  break;
               case 236:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 239:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 101)
                     jjAddStates(283, 286);
                  break;
               case 243:
               case 247:
                  if (curChar == 105)
                     jjCheckNAdd(220);
                  break;
               case 244:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if (curChar == 115)
                     jjCheckNAdd(210);
                  break;
               case 246:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 114)
                     jjCheckNAddStates(181, 183);
                  break;
               case 251:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 256:
               case 259:
                  jjCheckNAddTwoStates(256, 257);
                  break;
               case 263:
                  jjAddStates(287, 288);
                  break;
               case 266:
                  if (curChar == 102)
                     jjAddStates(193, 195);
                  break;
               case 271:
                  jjCheckNAddStates(199, 201);
                  break;
               case 273:
                  if ((0xfffffddfffffffffL & l) != 0L)
                     jjCheckNAddStates(199, 201);
                  break;
               case 274:
                  if (curChar == 102)
                     jjAddStates(202, 204);
                  break;
               case 279:
               case 282:
                  jjCheckNAddTwoStates(279, 280);
                  break;
               case 286:
                  jjAddStates(289, 290);
                  break;
               case 288:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 289:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 291:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 295:
               case 298:
                  jjCheckNAddTwoStates(295, 296);
                  break;
               case 302:
                  jjAddStates(291, 292);
                  break;
               case 306:
               case 309:
                  jjCheckNAddTwoStates(306, 307);
                  break;
               case 313:
                  jjAddStates(293, 294);
                  break;
               case 315:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 318:
               case 321:
                  jjCheckNAddTwoStates(318, 319);
                  break;
               case 325:
                  jjAddStates(295, 296);
                  break;
               case 328:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(229, 230);
                  break;
               case 331:
                  jjAddStates(297, 298);
                  break;
               case 333:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 328;
                  break;
               case 334:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 333;
                  break;
               case 335:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 336:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 335;
                  break;
               case 338:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(231, 232);
                  break;
               case 341:
                  jjAddStates(299, 300);
                  break;
               case 343:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 338;
                  break;
               case 344:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 345:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 346:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 345;
                  break;
               case 347:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(247, 249);
                  break;
               case 348:
                  if ((0x200000002000000L & l) != 0L)
                     jjCheckNAddTwoStates(349, 358);
                  break;
               case 349:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(349, 358);
                  break;
               case 350:
                  if ((0x400000004000L & l) != 0L && kind > 115)
                     kind = 115;
                  break;
               case 351:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 350;
                  break;
               case 352:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 351;
                  break;
               case 353:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 352;
                  break;
               case 354:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 353;
                  break;
               case 355:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 354;
                  break;
               case 356:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 355;
                  break;
               case 357:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 356;
                  break;
               case 358:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 357;
                  break;
               case 359:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 348;
                  break;
               case 360:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 359;
                  break;
               case 361:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 360;
                  break;
               case 362:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(363, 368);
                  break;
               case 363:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(363, 368);
                  break;
               case 364:
                  if ((0x100000001000L & l) != 0L && kind > 121)
                     kind = 121;
                  break;
               case 365:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 364;
                  break;
               case 366:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 365;
                  break;
               case 367:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 366;
                  break;
               case 368:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 367;
                  break;
               case 369:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 362;
                  break;
               case 370:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 369;
                  break;
               case 371:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 370;
                  break;
               case 372:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 371;
                  break;
               case 373:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 372;
                  break;
               case 374:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(375, 376);
                  break;
               case 375:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(375, 376);
                  break;
               case 376:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(301, 302);
                  break;
               case 377:
                  if ((0x4000000040000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 378:
               case 379:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(377);
                  break;
               case 380:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 381:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 380;
                  break;
               case 382:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 383:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 384:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 383;
                  break;
               case 385:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(242, 246);
                  break;
               case 386:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(387, 395);
                  break;
               case 387:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(387, 395);
                  break;
               case 388:
                  if ((0x8000000080L & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 389:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 388;
                  break;
               case 390:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 389;
                  break;
               case 391:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 390;
                  break;
               case 392:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 391;
                  break;
               case 393:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 392;
                  break;
               case 394:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 393;
                  break;
               case 395:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 394;
                  break;
               case 396:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 386;
                  break;
               case 397:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 396;
                  break;
               case 398:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 397;
                  break;
               case 399:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 398;
                  break;
               case 400:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 399;
                  break;
               case 401:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 400;
                  break;
               case 402:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 401;
                  break;
               case 403:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 402;
                  break;
               case 404:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(405, 414);
                  break;
               case 405:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(405, 414);
                  break;
               case 406:
                  if ((0x400000004000L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 407:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 406;
                  break;
               case 408:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 407;
                  break;
               case 409:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 408;
                  break;
               case 410:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 409;
                  break;
               case 411:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 410;
                  break;
               case 412:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 411;
                  break;
               case 413:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 412;
                  break;
               case 414:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 413;
                  break;
               case 415:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 404;
                  break;
               case 416:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 415;
                  break;
               case 417:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 416;
                  break;
               case 418:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 417;
                  break;
               case 419:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 418;
                  break;
               case 420:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 419;
                  break;
               case 421:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 420;
                  break;
               case 422:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 421;
                  break;
               case 423:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(424, 433);
                  break;
               case 424:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(424, 433);
                  break;
               case 425:
                  if ((0x400000004000L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 426:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 425;
                  break;
               case 427:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 426;
                  break;
               case 428:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 427;
                  break;
               case 429:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 428;
                  break;
               case 430:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 429;
                  break;
               case 431:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 430;
                  break;
               case 432:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 431;
                  break;
               case 433:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 432;
                  break;
               case 434:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 423;
                  break;
               case 435:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 434;
                  break;
               case 436:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 435;
                  break;
               case 437:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 436;
                  break;
               case 438:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 437;
                  break;
               case 439:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 438;
                  break;
               case 440:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 439;
                  break;
               case 441:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 440;
                  break;
               case 442:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(443, 451);
                  break;
               case 443:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(443, 451);
                  break;
               case 444:
                  if ((0x8000000080L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 445:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 444;
                  break;
               case 446:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 445;
                  break;
               case 447:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 446;
                  break;
               case 448:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 447;
                  break;
               case 449:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 448;
                  break;
               case 450:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 449;
                  break;
               case 451:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 450;
                  break;
               case 452:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 442;
                  break;
               case 453:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 452;
                  break;
               case 454:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 453;
                  break;
               case 455:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 454;
                  break;
               case 456:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 455;
                  break;
               case 457:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 456;
                  break;
               case 458:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 457;
                  break;
               case 459:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 458;
                  break;
               case 460:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(461, 472);
                  break;
               case 461:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(461, 472);
                  break;
               case 462:
                  if ((0x10000000100000L & l) != 0L && kind > 120)
                     kind = 120;
                  break;
               case 463:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 462;
                  break;
               case 464:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 463;
                  break;
               case 465:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 464;
                  break;
               case 466:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 465;
                  break;
               case 467:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 466;
                  break;
               case 468:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 467;
                  break;
               case 469:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 468;
                  break;
               case 470:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 469;
                  break;
               case 471:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 470;
                  break;
               case 472:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 471;
                  break;
               case 473:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 460;
                  break;
               case 474:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 473;
                  break;
               case 475:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 474;
                  break;
               case 476:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 475;
                  break;
               case 477:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 476;
                  break;
               case 478:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 477;
                  break;
               case 479:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 478;
                  break;
               case 480:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 479;
                  break;
               case 481:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(237, 241);
                  break;
               case 482:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(483, 485);
                  break;
               case 483:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(483, 485);
                  break;
               case 484:
                  if ((0x10000000100000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 485:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 484;
                  break;
               case 486:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 482;
                  break;
               case 487:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 486;
                  break;
               case 488:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 487;
                  break;
               case 489:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 488;
                  break;
               case 490:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 489;
                  break;
               case 491:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 490;
                  break;
               case 492:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 491;
                  break;
               case 493:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(494, 496);
                  break;
               case 494:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(494, 496);
                  break;
               case 495:
                  if ((0x400000004000L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 496:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 495;
                  break;
               case 497:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 493;
                  break;
               case 498:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 497;
                  break;
               case 499:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 498;
                  break;
               case 500:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 499;
                  break;
               case 501:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 500;
                  break;
               case 502:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 501;
                  break;
               case 503:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 502;
                  break;
               case 504:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(505, 508);
                  break;
               case 505:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(505, 508);
                  break;
               case 506:
                  if ((0x4000000040L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 507:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 506;
                  break;
               case 508:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 507;
                  break;
               case 509:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 504;
                  break;
               case 510:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(511, 517);
                  break;
               case 511:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(511, 517);
                  break;
               case 512:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAddTwoStates(513, 515);
                  break;
               case 513:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(513, 515);
                  break;
               case 514:
                  if ((0x400000004000L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 515:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 514;
                  break;
               case 516:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 512;
                  break;
               case 517:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 516;
                  break;
               case 518:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 510;
                  break;
               case 519:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(520, 524);
                  break;
               case 520:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(520, 524);
                  break;
               case 521:
                  if ((0x1000000010L & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 522:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 521;
                  break;
               case 523:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 522;
                  break;
               case 524:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 523;
                  break;
               case 525:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 519;
                  break;
               case 526:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(235, 236);
                  break;
               case 527:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(528, 530);
                  break;
               case 528:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(528, 530);
                  break;
               case 529:
                  if ((0x10000000100000L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 530:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 529;
                  break;
               case 531:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 527;
                  break;
               case 532:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 531;
                  break;
               case 533:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 532;
                  break;
               case 534:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 533;
                  break;
               case 535:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 534;
                  break;
               case 536:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 535;
                  break;
               case 537:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(538, 540);
                  break;
               case 538:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(538, 540);
                  break;
               case 539:
                  if ((0x400000004000L & l) != 0L && kind > 126)
                     kind = 126;
                  break;
               case 540:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 539;
                  break;
               case 541:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 537;
                  break;
               case 542:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 541;
                  break;
               case 543:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 542;
                  break;
               case 544:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 543;
                  break;
               case 545:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 544;
                  break;
               case 546:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 545;
                  break;
               case 547:
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(233, 234);
                  break;
               case 548:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAddTwoStates(549, 557);
                  break;
               case 549:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(549, 557);
                  break;
               case 550:
                  if ((0x2000000020L & l) != 0L && kind > 127)
                     kind = 127;
                  break;
               case 551:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 550;
                  break;
               case 552:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 551;
                  break;
               case 553:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 552;
                  break;
               case 554:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 553;
                  break;
               case 555:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 554;
                  break;
               case 556:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 555;
                  break;
               case 557:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 556;
                  break;
               case 558:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 548;
                  break;
               case 559:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 558;
                  break;
               case 560:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 559;
                  break;
               case 561:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 560;
                  break;
               case 562:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 561;
                  break;
               case 563:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAddTwoStates(564, 571);
                  break;
               case 564:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(564, 571);
                  break;
               case 565:
                  if ((0x4000000040000L & l) != 0L && kind > 128)
                     kind = 128;
                  break;
               case 566:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 565;
                  break;
               case 567:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 566;
                  break;
               case 568:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 567;
                  break;
               case 569:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 568;
                  break;
               case 570:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 569;
                  break;
               case 571:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 570;
                  break;
               case 572:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 563;
                  break;
               case 573:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 572;
                  break;
               case 574:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 573;
                  break;
               case 575:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 574;
                  break;
               case 576:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 575;
                  break;
               case 577:
                  if (curChar == 76)
                     jjAddStates(250, 251);
                  break;
               case 586:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(303, 304);
                  break;
               case 589:
                  if ((0x104000001040L & l) != 0L && kind > 198)
                     kind = 198;
                  break;
               case 594:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(305, 306);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(40, 42);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(29, 31);
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(59, 61);
                  break;
               case 54:
               case 57:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 63:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(87, 89);
                  break;
               case 108:
               case 111:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 115:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(268, 269);
                  break;
               case 123:
               case 125:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(105, 107);
                  break;
               case 130:
               case 133:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 137:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(270, 271);
                  break;
               case 146:
               case 149:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 153:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(272, 273);
                  break;
               case 157:
               case 160:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(157, 158);
                  break;
               case 164:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(274, 275);
                  break;
               case 169:
               case 172:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(169, 170);
                  break;
               case 176:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(276, 277);
                  break;
               case 179:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(179, 66);
                  break;
               case 199:
               case 202:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 206:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(278, 279);
                  break;
               case 211:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(181, 183);
                  break;
               case 256:
               case 259:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(256, 257);
                  break;
               case 263:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(287, 288);
                  break;
               case 271:
               case 273:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(199, 201);
                  break;
               case 279:
               case 282:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(279, 280);
                  break;
               case 286:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(289, 290);
                  break;
               case 295:
               case 298:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(295, 296);
                  break;
               case 302:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(291, 292);
                  break;
               case 306:
               case 309:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(306, 307);
                  break;
               case 313:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(293, 294);
                  break;
               case 318:
               case 321:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(318, 319);
                  break;
               case 325:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(295, 296);
                  break;
               case 331:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(297, 298);
                  break;
               case 341:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(299, 300);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 601 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   579, 580, 581, 583, 584, 590, 591, 593, 594, 598, 599, 600, 209, 219, 224, 227, 
   233, 265, 315, 327, 336, 337, 346, 316, 234, 242, 254, 198, 205, 42, 43, 45, 
   26, 27, 29, 193, 194, 195, 27, 29, 32, 33, 35, 32, 33, 35, 37, 32, 
   33, 38, 35, 32, 33, 40, 35, 46, 47, 52, 60, 48, 49, 51, 53, 178, 
   56, 57, 58, 59, 61, 71, 76, 79, 85, 117, 166, 167, 86, 94, 106, 61, 
   71, 76, 79, 85, 86, 94, 106, 63, 65, 66, 107, 114, 110, 111, 112, 113, 
   117, 166, 167, 119, 120, 155, 121, 122, 144, 123, 124, 143, 127, 66, 128, 129, 
   136, 132, 133, 134, 135, 145, 152, 148, 149, 150, 151, 156, 163, 159, 160, 161, 
   162, 168, 175, 171, 172, 173, 174, 48, 49, 51, 181, 48, 49, 182, 51, 48, 
   49, 184, 51, 42, 43, 45, 186, 42, 43, 187, 45, 42, 43, 189, 45, 193, 
   194, 27, 29, 194, 27, 29, 196, 27, 29, 201, 202, 203, 204, 209, 219, 224, 
   227, 233, 234, 242, 254, 211, 213, 214, 255, 262, 258, 259, 260, 261, 265, 315, 
   316, 267, 268, 304, 269, 270, 293, 271, 272, 292, 275, 276, 277, 278, 285, 281, 
   282, 283, 284, 294, 301, 297, 298, 299, 300, 305, 312, 308, 309, 310, 311, 317, 
   324, 320, 321, 322, 323, 329, 330, 339, 340, 562, 576, 536, 546, 492, 503, 509, 
   518, 525, 403, 422, 441, 459, 480, 361, 373, 384, 31, 41, 34, 36, 39, 44, 
   185, 188, 50, 180, 183, 72, 89, 93, 96, 98, 101, 105, 115, 116, 137, 138, 
   153, 154, 164, 165, 176, 177, 206, 207, 220, 237, 241, 244, 246, 249, 253, 263, 
   264, 286, 287, 302, 303, 313, 314, 325, 326, 331, 332, 341, 342, 378, 379, 587, 
   588, 595, 596, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\144\157", "\151\146", "\145\154\163\145", 
"\163\167\151\164\143\150", "\144\145\146\141\165\154\164", "\167\150\151\154\145", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", 
"\143\141\163\145", "\163\151\172\145\157\146", "\156\145\167", "\144\145\154\145\164\145", 
"\146\162\151\145\156\144", "\164\171\160\145\144\145\146", "\141\165\164\157", 
"\162\145\147\151\163\164\145\162", "\151\156\154\151\156\145", "\143\157\156\163\164", 
"\166\157\154\141\164\151\154\145", "\143\150\141\162", "\163\150\157\162\164", "\151\156\164", 
"\154\157\156\147", "\163\151\147\156\145\144", "\165\156\163\151\147\156\145\144", 
"\146\154\157\141\164", "\144\157\165\142\154\145", "\166\157\151\144", "\143\154\141\163\163", 
"\156\141\155\145\163\160\141\143\145", "\163\164\162\165\143\164", "\165\156\151\157\156", "\145\156\165\155", 
"\141\163\155", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\157\160\145\162\141\164\157\162", "\164\145\155\160\154\141\164\145", 
"\147\157\164\157", "\164\150\162\157\167", "\143\141\164\143\150", 
"\146\151\156\141\154\154\171", "\163\145\164\152\155\160", "\154\157\156\147\152\155\160", 
"\137\163\145\164\152\155\160", "\137\154\157\156\147\152\155\160", "\163\151\147\163\145\164\152\155\160", 
"\163\151\147\154\157\156\147\152\155\160", "\145\170\164\145\162\156", "\146\157\162", "\163\164\141\164\151\143", 
"\166\151\162\164\165\141\154", "\164\150\151\163", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\75", 
"\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\76\76\75", "\74\74\75", "\46\75", 
"\136\75", "\174\75", "\174\174", "\46\46", "\174", "\136", "\41", "\75\75", "\41\75", 
"\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", "\57", "\45", 
"\56\52", "\55\76\52", "\55\76", "\53\53", "\55\55", "\72\72", "\56\56\56", "\50", 
"\51", "\133", "\135", "\173", "\175", "\73", "\54", "\46", "\52", "\176", "\72", 
"\77", "\56", null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0x8fffffffffffffffL, 0xfeL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
};
static protected CharStream input_stream;
static private final int[] jjrounds = new int[601];
static private final int[] jjstateSet = new int[1202];
static protected char curChar;
/** Constructor. */
public TDLParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public TDLParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 601; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 199)
   {
      jjmatchedKind = 199;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
