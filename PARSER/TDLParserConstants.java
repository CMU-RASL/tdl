/* Generated By:JavaCC: Do not edit this line. TDLParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TDLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int C_COMMENT = 2;
  /** RegularExpression Id. */
  int CXX_COMMENT = 3;
  /** RegularExpression Id. */
  int C_MACROS_TO_IGNORE = 4;
  /** RegularExpression Id. */
  int C_IF_ZERO_HACK = 5;
  /** RegularExpression Id. */
  int DO = 6;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int SWITCH = 9;
  /** RegularExpression Id. */
  int DEFAULT_LABEL = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int CONTINUE = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int CASE = 15;
  /** RegularExpression Id. */
  int SIZEOF = 16;
  /** RegularExpression Id. */
  int NEW = 17;
  /** RegularExpression Id. */
  int DELETE = 18;
  /** RegularExpression Id. */
  int FRIEND = 19;
  /** RegularExpression Id. */
  int TYPEDEF = 20;
  /** RegularExpression Id. */
  int AUTO = 21;
  /** RegularExpression Id. */
  int REGISTER = 22;
  /** RegularExpression Id. */
  int INLINE = 23;
  /** RegularExpression Id. */
  int CONST = 24;
  /** RegularExpression Id. */
  int VOLATILE = 25;
  /** RegularExpression Id. */
  int CHAR = 26;
  /** RegularExpression Id. */
  int SHORT = 27;
  /** RegularExpression Id. */
  int INT = 28;
  /** RegularExpression Id. */
  int LONG = 29;
  /** RegularExpression Id. */
  int SIGNED = 30;
  /** RegularExpression Id. */
  int UNSIGNED = 31;
  /** RegularExpression Id. */
  int FLOAT = 32;
  /** RegularExpression Id. */
  int DOUBLE = 33;
  /** RegularExpression Id. */
  int VOID = 34;
  /** RegularExpression Id. */
  int CLASS = 35;
  /** RegularExpression Id. */
  int NAMESPACE = 36;
  /** RegularExpression Id. */
  int STRUCT = 37;
  /** RegularExpression Id. */
  int UNION = 38;
  /** RegularExpression Id. */
  int ENUM = 39;
  /** RegularExpression Id. */
  int ASM = 40;
  /** RegularExpression Id. */
  int PRIVATE = 41;
  /** RegularExpression Id. */
  int PROTECTED = 42;
  /** RegularExpression Id. */
  int PUBLIC = 43;
  /** RegularExpression Id. */
  int OPERATOR = 44;
  /** RegularExpression Id. */
  int TEMPLATE = 45;
  /** RegularExpression Id. */
  int GOTO = 46;
  /** RegularExpression Id. */
  int THROW = 47;
  /** RegularExpression Id. */
  int CATCH = 48;
  /** RegularExpression Id. */
  int FINALLY = 49;
  /** RegularExpression Id. */
  int SETJMP = 50;
  /** RegularExpression Id. */
  int LONGJMP = 51;
  /** RegularExpression Id. */
  int _SETJMP = 52;
  /** RegularExpression Id. */
  int _LONGJMP = 53;
  /** RegularExpression Id. */
  int SIGSETJMP = 54;
  /** RegularExpression Id. */
  int SIGLONGJMP = 55;
  /** RegularExpression Id. */
  int EXTERN_CS = 56;
  /** RegularExpression Id. */
  int FOR_CS = 57;
  /** RegularExpression Id. */
  int STATIC_CS = 58;
  /** RegularExpression Id. */
  int VIRTUAL_CS = 59;
  /** RegularExpression Id. */
  int THIS_CS = 60;
  /** RegularExpression Id. */
  int EXTERN_CI = 61;
  /** RegularExpression Id. */
  int FOR_CI = 62;
  /** RegularExpression Id. */
  int STATIC_CI = 63;
  /** RegularExpression Id. */
  int VIRTUAL_CI = 64;
  /** RegularExpression Id. */
  int THIS_CI = 65;
  /** RegularExpression Id. */
  int TASK = 66;
  /** RegularExpression Id. */
  int GOAL = 67;
  /** RegularExpression Id. */
  int COMMAND = 68;
  /** RegularExpression Id. */
  int MONITOR = 69;
  /** RegularExpression Id. */
  int EXCEPTION = 70;
  /** RegularExpression Id. */
  int HANDLER = 71;
  /** RegularExpression Id. */
  int RESUME = 72;
  /** RegularExpression Id. */
  int HANDLES = 73;
  /** RegularExpression Id. */
  int SUCCESS = 74;
  /** RegularExpression Id. */
  int POSTPONE = 75;
  /** RegularExpression Id. */
  int FAIL = 76;
  /** RegularExpression Id. */
  int IN = 77;
  /** RegularExpression Id. */
  int OUT = 78;
  /** RegularExpression Id. */
  int INOUT = 79;
  /** RegularExpression Id. */
  int SELF = 80;
  /** RegularExpression Id. */
  int CHILD = 81;
  /** RegularExpression Id. */
  int PARENT = 82;
  /** RegularExpression Id. */
  int PREVIOUS = 83;
  /** RegularExpression Id. */
  int ENABLED = 84;
  /** RegularExpression Id. */
  int ACTIVE = 85;
  /** RegularExpression Id. */
  int COMPLETED = 86;
  /** RegularExpression Id. */
  int HANDLING = 87;
  /** RegularExpression Id. */
  int EXPANSION = 88;
  /** RegularExpression Id. */
  int EXECUTION = 89;
  /** RegularExpression Id. */
  int PLANNING = 90;
  /** RegularExpression Id. */
  int ACHIEVEMENT = 91;
  /** RegularExpression Id. */
  int EXPAND = 92;
  /** RegularExpression Id. */
  int FIRST = 93;
  /** RegularExpression Id. */
  int DELAY = 94;
  /** RegularExpression Id. */
  int SEQUENTIAL = 95;
  /** RegularExpression Id. */
  int SERIAL = 96;
  /** RegularExpression Id. */
  int PARALLEL = 97;
  /** RegularExpression Id. */
  int WAIT = 98;
  /** RegularExpression Id. */
  int DISABLE = 99;
  /** RegularExpression Id. */
  int UNTIL = 100;
  /** RegularExpression Id. */
  int AFTER = 101;
  /** RegularExpression Id. */
  int TERMINATE = 102;
  /** RegularExpression Id. */
  int AT = 103;
  /** RegularExpression Id. */
  int MAXIMUM = 104;
  /** RegularExpression Id. */
  int ACTIVATE = 105;
  /** RegularExpression Id. */
  int TRIGGER = 106;
  /** RegularExpression Id. */
  int MONITOR_PERIOD = 107;
  /** RegularExpression Id. */
  int ON = 108;
  /** RegularExpression Id. */
  int PERSISTENT = 109;
  /** RegularExpression Id. */
  int DISTRIBUTED = 110;
  /** RegularExpression Id. */
  int FORMAT = 111;
  /** RegularExpression Id. */
  int THREADED = 112;
  /** RegularExpression Id. */
  int NAME = 113;
  /** RegularExpression Id. */
  int EXPAND_FIRST = 114;
  /** RegularExpression Id. */
  int DELAY_EXPANSION = 115;
  /** RegularExpression Id. */
  int SEQUENTIAL_HANDLING = 116;
  /** RegularExpression Id. */
  int SEQUENTIAL_EXPANSION = 117;
  /** RegularExpression Id. */
  int SEQUENTIAL_EXECUTION = 118;
  /** RegularExpression Id. */
  int SEQUENTIAL_PLANNING = 119;
  /** RegularExpression Id. */
  int SEQUENTIAL_ACHIEVEMENT = 120;
  /** RegularExpression Id. */
  int DISABLE_UNTIL = 121;
  /** RegularExpression Id. */
  int DISABLE_FOR = 122;
  /** RegularExpression Id. */
  int TERMINATE_AT = 123;
  /** RegularExpression Id. */
  int TERMINATE_IN = 124;
  /** RegularExpression Id. */
  int ACTIVATE_AT = 125;
  /** RegularExpression Id. */
  int ACTIVATE_IN = 126;
  /** RegularExpression Id. */
  int MAXIMUM_ACTIVATE = 127;
  /** RegularExpression Id. */
  int MAXIMUM_TRIGGER = 128;
  /** RegularExpression Id. */
  int ON_TERMINATE = 129;
  /** RegularExpression Id. */
  int SPAWN = 130;
  /** RegularExpression Id. */
  int WITH = 131;
  /** RegularExpression Id. */
  int USING_FILE_STANDARD = 132;
  /** RegularExpression Id. */
  int USING_FILE_QUOTE = 133;
  /** RegularExpression Id. */
  int TDL_REF = 134;
  /** RegularExpression Id. */
  int TDL_REF_IN = 135;
  /** RegularExpression Id. */
  int TDL_BIND = 136;
  /** RegularExpression Id. */
  int GET_NUMBER_OF_TRIGGERS = 137;
  /** RegularExpression Id. */
  int GET_NUMBER_OF_ACTIVATES = 138;
  /** RegularExpression Id. */
  int EQUAL = 139;
  /** RegularExpression Id. */
  int MULTIPLY_EQUAL = 140;
  /** RegularExpression Id. */
  int DIVIDE_EQUAL = 141;
  /** RegularExpression Id. */
  int MODULO_EQUAL = 142;
  /** RegularExpression Id. */
  int PLUS_EQUAL = 143;
  /** RegularExpression Id. */
  int MINUS_EQUAL = 144;
  /** RegularExpression Id. */
  int RIGHTSHIFT_EQUAL = 145;
  /** RegularExpression Id. */
  int LEFTSHIFT_EQUAL = 146;
  /** RegularExpression Id. */
  int AND_EQUAL = 147;
  /** RegularExpression Id. */
  int XOR_EQUAL = 148;
  /** RegularExpression Id. */
  int OR_EQUAL = 149;
  /** RegularExpression Id. */
  int LOGICAL_OR = 150;
  /** RegularExpression Id. */
  int LOGICAL_AND = 151;
  /** RegularExpression Id. */
  int INCLUSIVE_OR = 152;
  /** RegularExpression Id. */
  int EXCLUSIVE_OR = 153;
  /** RegularExpression Id. */
  int NOT = 154;
  /** RegularExpression Id. */
  int EQUALITY = 155;
  /** RegularExpression Id. */
  int INEQUALITY = 156;
  /** RegularExpression Id. */
  int LESS_THAN = 157;
  /** RegularExpression Id. */
  int GREATER_THAN = 158;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQUALS = 159;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQUALS = 160;
  /** RegularExpression Id. */
  int LEFT_SHIFT = 161;
  /** RegularExpression Id. */
  int RIGHT_SHIFT = 162;
  /** RegularExpression Id. */
  int PLUS = 163;
  /** RegularExpression Id. */
  int MINUS = 164;
  /** RegularExpression Id. */
  int DIVIDE = 165;
  /** RegularExpression Id. */
  int MODULO = 166;
  /** RegularExpression Id. */
  int POINTER_TO_MEMBER = 167;
  /** RegularExpression Id. */
  int POINTER_TO_MEMBER_DEREFERENCE = 168;
  /** RegularExpression Id. */
  int DEREFERENCE = 169;
  /** RegularExpression Id. */
  int INCREMENT = 170;
  /** RegularExpression Id. */
  int DECREMENT = 171;
  /** RegularExpression Id. */
  int SCOPE = 172;
  /** RegularExpression Id. */
  int ELLIPSIS = 173;
  /** RegularExpression Id. */
  int OPEN_PAREN = 174;
  /** RegularExpression Id. */
  int CLOSE_PAREN = 175;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 176;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 177;
  /** RegularExpression Id. */
  int OPEN_BRACE = 178;
  /** RegularExpression Id. */
  int CLOSE_BRACE = 179;
  /** RegularExpression Id. */
  int SEMICOLON = 180;
  /** RegularExpression Id. */
  int COMMA = 181;
  /** RegularExpression Id. */
  int AMPERSAND = 182;
  /** RegularExpression Id. */
  int ASTERISK = 183;
  /** RegularExpression Id. */
  int TILDE = 184;
  /** RegularExpression Id. */
  int COLON = 185;
  /** RegularExpression Id. */
  int QUESTION_MARK = 186;
  /** RegularExpression Id. */
  int PERIOD = 187;
  /** RegularExpression Id. */
  int DECIMAL_NUMBER = 188;
  /** RegularExpression Id. */
  int OCTAL_NUMBER = 189;
  /** RegularExpression Id. */
  int HEX_NUMBER = 190;
  /** RegularExpression Id. */
  int INTEGER_CONSTANT = 191;
  /** RegularExpression Id. */
  int A_CHARACTER = 192;
  /** RegularExpression Id. */
  int CHARACTER_CONSTANT = 193;
  /** RegularExpression Id. */
  int STRING_CONSTANT = 194;
  /** RegularExpression Id. */
  int ID = 195;
  /** RegularExpression Id. */
  int NON_NEGATIVE_INTEGER_CONSTANT = 196;
  /** RegularExpression Id. */
  int FLOAT_CONSTANT_BASIC = 197;
  /** RegularExpression Id. */
  int FLOATING_CONSTANT = 198;
  /** RegularExpression Id. */
  int GARBAGE_TOKEN = 199;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<C_COMMENT>",
    "<CXX_COMMENT>",
    "<C_MACROS_TO_IGNORE>",
    "<C_IF_ZERO_HACK>",
    "\"do\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"default\"",
    "\"while\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"case\"",
    "\"sizeof\"",
    "\"new\"",
    "\"delete\"",
    "\"friend\"",
    "\"typedef\"",
    "\"auto\"",
    "\"register\"",
    "\"inline\"",
    "\"const\"",
    "\"volatile\"",
    "\"char\"",
    "\"short\"",
    "\"int\"",
    "\"long\"",
    "\"signed\"",
    "\"unsigned\"",
    "\"float\"",
    "\"double\"",
    "\"void\"",
    "\"class\"",
    "\"namespace\"",
    "\"struct\"",
    "\"union\"",
    "\"enum\"",
    "\"asm\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"operator\"",
    "\"template\"",
    "\"goto\"",
    "\"throw\"",
    "\"catch\"",
    "\"finally\"",
    "\"setjmp\"",
    "\"longjmp\"",
    "\"_setjmp\"",
    "\"_longjmp\"",
    "\"sigsetjmp\"",
    "\"siglongjmp\"",
    "\"extern\"",
    "\"for\"",
    "\"static\"",
    "\"virtual\"",
    "\"this\"",
    "\"EXTERN\"",
    "\"FOR\"",
    "\"STATIC\"",
    "\"VIRTUAL\"",
    "\"THIS\"",
    "\"Task\"",
    "\"Goal\"",
    "\"Command\"",
    "\"Monitor\"",
    "\"Exception\"",
    "\"Handler\"",
    "\"Resume\"",
    "\"Handles\"",
    "\"Success\"",
    "\"Postpone\"",
    "\"Fail\"",
    "\"IN\"",
    "\"OUT\"",
    "\"INOUT\"",
    "\"self\"",
    "\"child\"",
    "\"parent\"",
    "\"previous\"",
    "\"enabled\"",
    "\"active\"",
    "\"completed\"",
    "\"handling\"",
    "\"expansion\"",
    "\"execution\"",
    "\"planning\"",
    "\"achievement\"",
    "\"expand\"",
    "\"first\"",
    "\"delay\"",
    "\"sequential\"",
    "\"serial\"",
    "\"parallel\"",
    "\"wait\"",
    "\"disable\"",
    "\"until\"",
    "\"after\"",
    "\"terminate\"",
    "\"at\"",
    "\"maximum\"",
    "\"activate\"",
    "\"trigger\"",
    "\"period\"",
    "\"on\"",
    "\"persistent\"",
    "\"distributed\"",
    "\"format\"",
    "\"threaded\"",
    "\"name\"",
    "<EXPAND_FIRST>",
    "<DELAY_EXPANSION>",
    "<SEQUENTIAL_HANDLING>",
    "<SEQUENTIAL_EXPANSION>",
    "<SEQUENTIAL_EXECUTION>",
    "<SEQUENTIAL_PLANNING>",
    "<SEQUENTIAL_ACHIEVEMENT>",
    "<DISABLE_UNTIL>",
    "<DISABLE_FOR>",
    "<TERMINATE_AT>",
    "<TERMINATE_IN>",
    "<ACTIVATE_AT>",
    "<ACTIVATE_IN>",
    "<MAXIMUM_ACTIVATE>",
    "<MAXIMUM_TRIGGER>",
    "<ON_TERMINATE>",
    "\"spawn\"",
    "\"with\"",
    "<USING_FILE_STANDARD>",
    "<USING_FILE_QUOTE>",
    "<TDL_REF>",
    "<TDL_REF_IN>",
    "<TDL_BIND>",
    "\"getNumberOfTriggers\"",
    "\"getNumberOfActivates\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\">>=\"",
    "\"<<=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"%\"",
    "\".*\"",
    "\"->*\"",
    "\"->\"",
    "\"++\"",
    "\"--\"",
    "\"::\"",
    "\"...\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\"&\"",
    "\"*\"",
    "\"~\"",
    "\":\"",
    "\"?\"",
    "\".\"",
    "<DECIMAL_NUMBER>",
    "<OCTAL_NUMBER>",
    "<HEX_NUMBER>",
    "<INTEGER_CONSTANT>",
    "<A_CHARACTER>",
    "<CHARACTER_CONSTANT>",
    "<STRING_CONSTANT>",
    "<ID>",
    "<NON_NEGATIVE_INTEGER_CONSTANT>",
    "<FLOAT_CONSTANT_BASIC>",
    "<FLOATING_CONSTANT>",
    "<GARBAGE_TOKEN>",
  };

}
